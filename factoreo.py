# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FactoreoV2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import math
import sympy as sp
from sympy.abc import x
from func import Ui_Dialog

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 489)
        MainWindow.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0.323864, x2:1, y2:0, stop:0 rgba(255, 246, 0, 255), stop:0.482759 rgba(246, 127, 0, 255), stop:1 rgba(255, 0, 132, 255));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(-20, -10, 821, 481))
        self.widget.setStyleSheet("QWidget{\n"
                                  "background-color: rgb(4, 1, 31);\n"
                                  "border-bottom-right-radius: 9px;\n"
                                  "border-bottom-left-radius: 9px;\n"
                                  "}\n"
                                  "")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(50, 40, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.toolButton = QtWidgets.QToolButton(self.widget)
        self.toolButton.setGeometry(QtCore.QRect(560, 436, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.toolButton.setFont(font)
        self.toolButton.setStyleSheet("QToolButton {\n"
                                      "    background-color: white;\n"
                                      "    color: rgb(0, 0, 0);\n"
                                      "    border-radius: 5px;\n"
                                      "}\n"
                                      "QToolButton:pressed {\n"
                                      "    background-color: rgb(240, 240, 240);\n"
                                      "    color: rgb(251, 251, 251);\n"
                                      "    border-style: inset;\n"
                                      "}")
        self.toolButton.setObjectName("toolButton")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 80, 584, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(296, 22))
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                 "border-radius:5px")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(0, 2, 291, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setKerning(True)
        self.comboBox.setFont(font)
        self.comboBox.setAutoFillBackground(False)
        self.comboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "selection-background-color: rgb(168, 168, 168);\n"
                                    "color: rgb(0,0,0);\n"
                                    "selection-color: rgb(255, 255, 255);\n"
                                    "border-radius: 5px;\n"
                                    "")
        self.comboBox.setEditable(False)
        self.comboBox.setFrame(True)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout.addWidget(self.frame)
        self.limpiar = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.limpiar.sizePolicy().hasHeightForWidth())
        self.limpiar.setSizePolicy(sizePolicy)
        self.limpiar.setMinimumSize(QtCore.QSize(100, 20))
        self.limpiar.setStyleSheet("QPushButton {\n"
                                   "    background-color: white;\n"
                                   "    color: rgb(0, 0, 0);\n"
                                   "    border-radius: 5px;\n"
                                   "}\n"
                                   "QPushButton:pressed {\n"
                                   "    background-color: rgb(240, 240, 240);\n"
                                   "    color: rgb(251, 251, 251);\n"
                                   "    border-style: inset;\n"
                                   "}")
        self.limpiar.setObjectName("limpiar")
        self.horizontalLayout.addWidget(self.limpiar)
        self.resolver = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resolver.sizePolicy().hasHeightForWidth())
        self.resolver.setSizePolicy(sizePolicy)
        self.resolver.setMinimumSize(QtCore.QSize(150, 20))
        self.resolver.setStyleSheet("QPushButton {\n"
                                    "    background-color: white;\n"
                                    "    color: rgb(0, 0, 0);\n"
                                    "    border-radius: 5px;\n"
                                    "}\n"
                                    "QPushButton:pressed {\n"
                                    "    background-color: rgb(240, 240, 240);\n"
                                    "    color: rgb(251, 251, 251);\n"
                                    "    border-style: inset;\n"
                                    "}")
        self.resolver.setObjectName("resolver")
        self.horizontalLayout.addWidget(self.resolver)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(50, 190, 691, 61))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.primer_termino = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.primer_termino.setFont(font)
        self.primer_termino.setStyleSheet("color: rgb(255, 255, 255);")
        self.primer_termino.setObjectName("primer_termino")
        self.verticalLayout_4.addWidget(self.primer_termino)
        self.input1 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.input1.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
        self.input1.setInputMask("")
        self.input1.setText("")
        self.input1.setObjectName("input1")
        self.verticalLayout_4.addWidget(self.input1, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        self.line = QtWidgets.QFrame(self.horizontalLayoutWidget_2)
        self.line.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_2.addWidget(self.line)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.segundo_termino = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.segundo_termino.setFont(font)
        self.segundo_termino.setStyleSheet("color: rgb(255, 255, 255);")
        self.segundo_termino.setObjectName("segundo_termino")
        self.verticalLayout_5.addWidget(self.segundo_termino)
        self.input2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.input2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
        self.input2.setObjectName("input2")
        self.verticalLayout_5.addWidget(self.input2, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.line_2 = QtWidgets.QFrame(self.horizontalLayoutWidget_2)
        self.line_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_2.addWidget(self.line_2)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.tercer_termino = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.tercer_termino.setFont(font)
        self.tercer_termino.setStyleSheet("color: rgb(175, 175, 175)")
        self.tercer_termino.setObjectName("tercer_termino")
        self.verticalLayout_6.addWidget(self.tercer_termino)
        self.input3 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.input3.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
        self.input3.setObjectName("input3")
        self.verticalLayout_6.addWidget(self.input3, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(50, 260, 691, 61))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.cuarto_termino = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.cuarto_termino.setFont(font)
        self.cuarto_termino.setStyleSheet("color: rgb(175, 175, 175)")
        self.cuarto_termino.setObjectName("cuarto_termino")
        self.verticalLayout_7.addWidget(self.cuarto_termino)
        self.input4 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.input4.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
        self.input4.setInputMask("")
        self.input4.setText("")
        self.input4.setPlaceholderText("d")
        self.input4.setObjectName("input4")
        self.verticalLayout_7.addWidget(self.input4, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout_3.addLayout(self.verticalLayout_7)
        self.line_3 = QtWidgets.QFrame(self.horizontalLayoutWidget_3)
        self.line_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_3.addWidget(self.line_3)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.quinto_termino = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.quinto_termino.setFont(font)
        self.quinto_termino.setStyleSheet("color: rgb(175, 175, 175)")
        self.quinto_termino.setObjectName("quinto_termino")
        self.verticalLayout_8.addWidget(self.quinto_termino)
        self.input5 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.input5.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
        self.input5.setPlaceholderText("e")
        self.input5.setObjectName("input5")
        self.verticalLayout_8.addWidget(self.input5, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout_3.addLayout(self.verticalLayout_8)
        self.line_4 = QtWidgets.QFrame(self.horizontalLayoutWidget_3)
        self.line_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_3.addWidget(self.line_4)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.sexto_termino = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.sexto_termino.setFont(font)
        self.sexto_termino.setStyleSheet("color: rgb(175, 175, 175)")
        self.sexto_termino.setObjectName("sexto_termino")
        self.verticalLayout_9.addWidget(self.sexto_termino)
        self.input6 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.input6.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
        self.input6.setPlaceholderText("f")
        self.input6.setObjectName("input6")
        self.verticalLayout_9.addWidget(self.input6, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout_3.addLayout(self.verticalLayout_9)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(50, 139, 104, 41))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.grado = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.grado.sizePolicy().hasHeightForWidth())
        self.grado.setSizePolicy(sizePolicy)
        self.grado.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.grado.setFont(font)
        self.grado.setStyleSheet("color: rgb(255, 255, 255);\n"
                                 "border-radius:5px")
        self.grado.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.grado.setObjectName("grado")
        self.horizontalLayout_4.addWidget(self.grado)
        self.frame_2 = QtWidgets.QFrame(self.horizontalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setMinimumSize(QtCore.QSize(52, 29))
        self.frame_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                   "border-radius:5px")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.grado_select = QtWidgets.QSpinBox(self.frame_2)
        self.grado_select.setGeometry(QtCore.QRect(1, 2, 50, 25))
        self.grado_select.setMinimumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.grado_select.setFont(font)
        self.grado_select.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.grado_select.setStyleSheet("selection-background-color: rgb(255, 255, 255);\n"
                                        "color: rgb(0,0,0);\n"
                                        "selection-color: rgb(0,0,0);")
        self.grado_select.setFrame(True)
        self.grado_select.setAlignment(QtCore.Qt.AlignCenter)
        self.grado_select.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.grado_select.setProperty("showGroupSeparator", False)
        self.grado_select.setMinimum(2)
        self.grado_select.setMaximum(5)
        self.grado_select.setProperty("value", 2)
        self.grado_select.setObjectName("grado_select")
        self.horizontalLayout_4.addWidget(self.frame_2)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(50, 350, 621, 61))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.resultado = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.resultado.setFont(font)
        self.resultado.setStyleSheet("color: rgb(255, 255, 255);")
        self.resultado.setObjectName("resultado")
        self.verticalLayout.addWidget(self.resultado)
        self.input_result = QtWidgets.QLineEdit(self.horizontalLayoutWidget_5)
        self.input_result.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                        "color: rgb(85, 85, 85);\n"
                                        "border-radius: 5px\n"
                                        "")
        self.input_result.setReadOnly(True)
        self.input_result.setObjectName("input_result")
        self.input_result.setMaximumWidth(286)
        self.verticalLayout.addWidget(self.input_result)
        self.horizontalLayout_5.addLayout(self.verticalLayout)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.label_11 = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        self.label_11.setMinimumSize(QtCore.QSize(250, 0))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setItalic(True)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
        self.label_11.setInputMethodHints(QtCore.Qt.ImhMultiLine)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_5.addWidget(self.label_11)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 700, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

## CHANGES
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.input1, self.input2)
        MainWindow.setTabOrder(self.input2, self.input3)
        MainWindow.setTabOrder(self.input3, self.input4)
        MainWindow.setTabOrder(self.input4, self.input5)
        MainWindow.setTabOrder(self.input5, self.input6)
        MainWindow.setTabOrder(self.input6, self.resolver)
        MainWindow.setTabOrder(self.resolver, self.limpiar)
        MainWindow.setTabOrder(self.limpiar, self.toolButton)
        MainWindow.setTabOrder(self.toolButton, self.input_result)

        self.input3.setReadOnly(True)
        self.input4.setReadOnly(True)
        self.input5.setReadOnly(True)
        self.input6.setReadOnly(True)

        self.label_11.hide()

        self.frame_2.setStyleSheet("background-color: rgb(175, 175, 175)")
        self.grado.setStyleSheet("color: rgb(175, 175, 175);")
        self.grado_select.clear()
        self.grado_select.setReadOnly(True)
        self.grado_select.setStyleSheet("selection-background-color: rgba(175, 175, 175, 128);\n"
                                        "color: rgb(0,0,0);\n"
                                        "selection-color: rgb(0,0,0);")

        self.comboBox.currentTextChanged.connect(self.option_style_change)
        self.grado_select.valueChanged.connect(self.grado_changed)

        self.resolver.clicked.connect(self.resolver_clicked)
        self.limpiar.clicked.connect(self.clear_inputs)

        self.toolButton.clicked.connect(self.open_funcionamiento)

    def clear_inputs(self):
        self.input1.clear()
        self.input2.clear()
        self.input3.clear()
        self.input4.clear()
        self.input5.clear()
        self.input6.clear()
        self.input_result.clear()

    def option_style_change(self):
        if self.comboBox.currentText() == "Diferencia de Cuadrados":
            self.input3.setReadOnly(True)
            self.input4.setReadOnly(True)
            self.input5.setReadOnly(True)
            self.input6.setReadOnly(True)

            self.input3.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input4.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input5.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input6.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")

            self.tercer_termino.setStyleSheet("color: rgb(175, 175, 175)")
            self.cuarto_termino.setStyleSheet("color: rgb(175, 175, 175)")
            self.quinto_termino.setStyleSheet("color: rgb(175, 175, 175)")
            self.sexto_termino.setStyleSheet("color: rgb(175, 175, 175)")

            self.input1.setPlaceholderText("Ax**(2)")
            self.input2.setPlaceholderText("Bx**(2)")

            self.label_11.hide()

            self.frame_2.setStyleSheet("background-color: rgb(175, 175, 175)")
            self.grado.setStyleSheet("color: rgb(175, 175, 175);")
            self.grado_select.clear()
            self.grado_select.setReadOnly(True)
            self.grado_select.setStyleSheet("selection-background-color: rgba(175, 175, 175, 128);\n"
                                            "color: rgb(0,0,0);\n"
                                            "selection-color: rgb(0,0,0);")
            self.clear_inputs()


        elif self.comboBox.currentText() == "Trinomio de la forma ax^2+bx+c" or self.comboBox.currentText() == "Trinomio Cuadrado Perfecto":
            self.tercer_termino.setStyleSheet("color: rgb(255, 255, 255);")

            self.input3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
            self.input3.setReadOnly(False)

            self.input4.setReadOnly(True)
            self.input5.setReadOnly(True)
            self.input6.setReadOnly(True)

            self.input4.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input5.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input6.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")

            self.cuarto_termino.setStyleSheet("color: rgb(175, 175, 175)")
            self.quinto_termino.setStyleSheet("color: rgb(175, 175, 175)")
            self.sexto_termino.setStyleSheet("color: rgb(175, 175, 175)")

            self.input1.setPlaceholderText("a")
            self.input2.setPlaceholderText("b")
            self.input3.setPlaceholderText("c")

            self.frame_2.setStyleSheet("background-color: rgb(175, 175, 175)")
            self.grado.setStyleSheet("color: rgb(255, 255, 255);")
            self.grado_select.setMinimum(2)
            self.grado_select.setValue(2)
            self.grado_select.setReadOnly(True)
            self.grado_select.setStyleSheet("selection-background-color: rgba(175, 175, 175, 128);\n"
                                            "color: rgb(0,0,0);\n"
                                            "selection-color: rgb(0,0,0);")
            self.label_11.hide()
            self.clear_inputs()

        elif self.comboBox.currentText() == "Factor común":
            self.tercer_termino.setStyleSheet("color: rgb(255, 255, 255);")
            self.input3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input3.setReadOnly(False)

            self.input1.setPlaceholderText("a")
            self.input2.setPlaceholderText("b")

            self.grado_select.setValue(3)
            self.grado_select.setMinimum(3)

            self.frame_2.setStyleSheet("background-color: rgb(255, 255, 255)")
            self.grado.setStyleSheet("color: rgb(255, 255, 255);")
            self.grado_select.setReadOnly(False)
            self.grado_select.setStyleSheet("selection-background-color: rgb(255, 255, 255);\n"
                                            "color: rgb(0,0,0);\n"
                                            "selection-color: rgb(0,0,0);")

            self.label_11.hide()
            self.clear_inputs()

    def grado_changed(self):
        if self.grado_select.value() == 5:
            self.input4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
            self.input5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
            self.input6.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")

            self.cuarto_termino.setStyleSheet("color: rgb(255, 255, 255);")
            self.quinto_termino.setStyleSheet("color: rgb(255, 255, 255);")
            self.sexto_termino.setStyleSheet("color: rgb(255, 255, 255);")

            self.input4.setReadOnly(False)
            self.input5.setReadOnly(False)
            self.input6.setReadOnly(False)

        elif self.grado_select.value() == 4:
            self.input4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
            self.input5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                  "color: rgb(85, 85, 85);\n"
                                  "border-radius: 5px")
            self.input6.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")

            self.cuarto_termino.setStyleSheet("color: rgb(255, 255, 255);")
            self.quinto_termino.setStyleSheet("color: rgb(255, 255, 255);")
            self.sexto_termino.setStyleSheet("color: rgb(175, 175, 175);")

            self.input4.setReadOnly(False)
            self.input5.setReadOnly(False)
            self.input6.setReadOnly(True)

        elif self.grado_select.value() == 3:
            self.input4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input5.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input6.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")

            self.cuarto_termino.setStyleSheet("color: rgb(255, 255, 255);")
            self.quinto_termino.setStyleSheet("color: rgb(175, 175, 175);")
            self.sexto_termino.setStyleSheet("color: rgb(175, 175, 175);")

            self.input4.setReadOnly(False)
            self.input5.setReadOnly(True)
            self.input6.setReadOnly(True)
        else:
            self.input4.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input5.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")
            self.input6.setStyleSheet("background-color: rgba(175, 175, 175, 128);\n"
                                      "color: rgb(85, 85, 85);\n"
                                      "border-radius: 5px")

            self.cuarto_termino.setStyleSheet("color: rgb(175, 175, 175);")
            self.quinto_termino.setStyleSheet("color: rgb(175, 175, 175);")
            self.sexto_termino.setStyleSheet("color: rgb(175, 175, 175);")

            self.input4.setReadOnly(True)
            self.input5.setReadOnly(True)
            self.input6.setReadOnly(True)

    def isnum(self, num):
        try:
            float(num)
            return True
        except ValueError:
            return False

    def has_perfect_square(self, num):
        num = float(num)
        if num >= 0:
            num_sqrt = math.sqrt(num)

        if num_sqrt.is_integer():
            return True
        else:
            return False

    def getexpo(self, var, varstr):
        var_idx = varstr.index(var)
        if varstr.isalpha():
            a = 1 / 2
        elif len(varstr[var_idx:]) == 1:
            a = 1 / 2
        elif varstr[var_idx + 1].isalpha():
            a = 1 / 2
        else:
            varstr = varstr[var_idx + 1:]

            a = ''
            for ch in varstr:
                if ch.isalpha():
                    break
                a += ch
            a = float(a) / 2
            if a.is_integer():
                a = int(a)
        return a

    def int_or_float(self,x):
        if x.is_integer():
            x = int(x)
        else:
            x = round(x, 3)
        return x
    def check_and_sqrt(self, x_2): ## W
        if self.isnum(x_2):
            x_2 = float(x_2)
            x = math.sqrt(x_2)

            x = self.int_or_float(x)

            return x

        elif x_2.isascii(): #9x**(2)b**(4)
            x_2 = x_2.replace('*', '').replace('(','').replace(')','')

            # Coeficiente
            coef_2 = ''
            count = 0
            for ch in x_2:
                if ch.isalpha():
                    break
                coef_2 += ch
                count += 1

            if self.isnum(coef_2):
                coef_2 = float(coef_2)
                coef = math.sqrt(coef_2)

                if coef.is_integer():
                    coef = int(coef)
                else:
                    coef = round(coef, 3)
            else:
                coef = ''

            # Variables y sus exponentes
            vars_expo = x_2[count:]
            var_expo_list = []

            for i in range(len(vars_expo)):
                if vars_expo[i].isalpha():
                    var = vars_expo[i]
                    expo = self.getexpo(var, vars_expo)

                    if expo == 1:
                        var_expo_list.append(f'{var}')
                    else:
                        var_expo_list.append(f'{var}**{expo}')

            # UNIR
            x = str(coef)

            for v in var_expo_list:
                x += v

            return x

    def resolver_clicked(self):
        self.restricted_characters = [',', '!', '_', '@', '#', '$', '%', '^', '&', '=', '{', '}',
                                 '[', ']', "'", '"', ';', ':', '<', '>', '/', '?', '`', '~']

        if self.comboBox.currentText() == "Diferencia de Cuadrados":
            dc_rc = self.restricted_characters
            dc_rc.append('-')
            dc_rc.append('+')
            a_2 = self.input1.text()
            b_2 = self.input2.text()

            if b_2.startswith('-'):
                b_2 = b_2[1:]

            if (not any(i in dc_rc for i in a_2)) and (not any(j in dc_rc for j in b_2)):

                if (self.isnum(a_2) or a_2.isascii()) and (self.isnum(b_2) or b_2.isascii()):
                    if a_2 != '' or b_2 != '':
                        a = self.check_and_sqrt(a_2)
                        b = self.check_and_sqrt(b_2)

                        #self.input_result.setText(self.dc_onlynum(a_2, b_2))
                        self.input_result.setText(f"({a}-{b})({a}+{b})")
                        self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                        self.label_11.setText("¡La expresión se factorizó correctamente!")
                        self.label_11.show()
                    else:
                        self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                        self.label_11.setText("Uno de los términos está en blanco.\n"
                                              "Si necesitas ayuda pulsa en Funcionamiento.")
                        self.label_11.show()
                else:
                    self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                    self.label_11.setText("Algo sucede con la sintaxis de los términos.\n"
                                          "Si necesitas ayuda pulsa en Funcionamiento.")
                    self.label_11.show()
            else:

                self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                self.label_11.setText("La operación no se pudo realizar.\n"
                                      "Si necesitas ayuda pulsa en Funcionamiento.")
                self.label_11.show()

        elif self.comboBox.currentText() == "Trinomio de la forma ax^2+bx+c":
            a = self.input1.text()
            b = self.input2.text()
            c = self.input3.text()

            if self.isnum(a) and self.isnum(b) and self.isnum(c):
                a = self.int_or_float(float(a))
                b = self.int_or_float(float(b))
                c = self.int_or_float(float(c))

                expr = a*x**2+b*x+c
                res = sp.polys.factor(expr)

                self.input_result.setText(f"{res}")
                self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                self.label_11.setText("¡La expresión se factorizó correctamente!")
                self.label_11.show()
            else:
                self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                self.label_11.setText("La sintaxis es incorrecta. Si necesitas\n"
                                      "ayuda pulsa en Funcionamiento.")
                self.label_11.show()
        elif self.comboBox.currentText() == "Trinomio Cuadrado Perfecto":
            a = self.input1.text()
            b = self.input2.text()
            c = self.input3.text()

            if self.isnum(a) and self.isnum(b) and self.isnum(c):
                if self.has_perfect_square(a) and self.has_perfect_square(c):
                    a = self.int_or_float(float(a))
                    b = self.int_or_float(float(b))
                    c = self.int_or_float(float(c))

                    expr = a * x ** 2 + b * x + c
                    res = sp.polys.factor(expr)

                    self.input_result.setText(f"{res}")
                    self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                    self.label_11.setText("¡La expresión se factorizó correctamente!")
                    self.label_11.show()
                else:
                    self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                    self.label_11.setText("A y C no son cuadrados perfectos. Si necesitas\n"
                                          "ayuda pulsa en Funcionamiento.")
                    self.label_11.show()
            else:
                self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                self.label_11.setText("La sintaxis es incorrecta. Si necesitas\n"
                                      "ayuda pulsa en Funcionamiento.")
                self.label_11.show()
        else:
            a = self.input1.text()
            b = self.input2.text()
            c = self.input3.text()
            d = self.input4.text()
            e = self.input5.text()
            f = self.input6.text()

            if self.grado_select.value() == 2:
                if self.isnum(a) and self.isnum(b) and self.isnum(c):

                    expr = int(a) * x ** 2 + int(b) * x + int(c)
                    res = sp.polys.factor(expr)

                    self.input_result.setText(f"{res}")
                    self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                    self.label_11.setText("¡La expresión se factorizó correctamente!")
                    self.label_11.show()
                else:
                    self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                    self.label_11.setText("La sintaxis es incorrecta. Si necesitas\n"
                                          "ayuda pulsa en Funcionamiento.")
                    self.label_11.show()

            elif self.grado_select.value() == 3:

                inputs_are_nums = self.isnum(a) and self.isnum(b) and self.isnum(c) and self.isnum(d)

                if inputs_are_nums:
                    a = self.int_or_float(float(a))
                    b = self.int_or_float(float(b))
                    c = self.int_or_float(float(c))
                    d = self.int_or_float(float(d))

                    expr = a * x ** 3 + b * x ** 2 + c * x + d
                    res = sp.polys.factor(expr)

                    self.input_result.setText(f"{res}")
                    self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                    self.label_11.setText("¡La expresión se factorizó correctamente!")
                    self.label_11.show()
                else:
                    self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                    self.label_11.setText("La sintaxis es incorrecta. Si necesitas\n"
                                          "ayuda pulsa en Funcionamiento.")
                    self.label_11.show()

            elif self.grado_select.value() == 4:
                inputs_are_nums = self.isnum(a) and self.isnum(b) and self.isnum(c) and self.isnum(d) and self.isnum(e)

                if inputs_are_nums:
                    a = self.int_or_float(float(a))
                    b = self.int_or_float(float(b))
                    c = self.int_or_float(float(c))
                    d = self.int_or_float(float(d))
                    e = self.int_or_float(float(e))

                    expr = a * x ** 4 + b * x ** 3 + c * x ** 2 + d * x + e
                    res = sp.polys.factor(expr)

                    self.input_result.setText(f"{res}")
                    self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                    self.label_11.setText("¡La expresión se factorizó correctamente!")
                    self.label_11.show()
                else:
                    self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                    self.label_11.setText("La sintaxis es incorrecta. Si necesitas\n"
                                          "ayuda pulsa en Funcionamiento.")
                    self.label_11.show()

            elif self.grado_select.value() == 5:
                inputs_are_nums = self.isnum(a) and self.isnum(b) and self.isnum(c) and self.isnum(d) and self.isnum(e) and self.isnum(f)

                if inputs_are_nums:
                    a = self.int_or_float(float(a))
                    b = self.int_or_float(float(b))
                    c = self.int_or_float(float(c))
                    d = self.int_or_float(float(d))
                    e = self.int_or_float(float(e))
                    f = self.int_or_float(float(f))

                    expr = a * x ** 5 + b * x ** 4 + c * x ** 3 + d * x ** 2 + e * x + f
                    res = sp.polys.factor(expr)

                    self.input_result.setText(f"{res}")
                    self.label_11.setStyleSheet("color: rgb(193, 193, 193);")
                    self.label_11.setText("¡La expresión se factorizó correctamente!")
                    self.label_11.show()
                else:
                    self.label_11.setStyleSheet("color: rgb(255, 59, 27);")
                    self.label_11.setText("La sintaxis es incorrecta. Si necesitas\n"
                                          "ayuda pulsa en Funcionamiento.")
                    self.label_11.show()

    def open_funcionamiento(self):
        self.func = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.func)
        self.func.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Factorización"))
        self.label.setText(_translate("MainWindow", "Factorización"))
        self.toolButton.setText(_translate("MainWindow", "Funcionamiento"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Diferencia de Cuadrados"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Trinomio de la forma ax^2+bx+c"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Trinomio Cuadrado Perfecto"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Factor común"))
        self.limpiar.setText(_translate("MainWindow", "Limpiar"))
        self.resolver.setText(_translate("MainWindow", "Resolver"))
        self.primer_termino.setText(_translate("MainWindow", "Ingresa el primer término"))
        self.input1.setPlaceholderText(_translate("MainWindow", "Ax**(2)"))
        self.segundo_termino.setText(_translate("MainWindow", "Ingresa segundo término"))
        self.input2.setPlaceholderText(_translate("MainWindow", "Bx**(2)"))
        self.tercer_termino.setText(_translate("MainWindow", "Ingresa tercer término"))
        self.input3.setPlaceholderText(_translate("MainWindow", "c"))
        self.cuarto_termino.setText(_translate("MainWindow", "Ingresa cuarto término"))
        self.input4.setPlaceholderText(_translate("MainWindow", "d"))
        self.quinto_termino.setText(_translate("MainWindow", "Ingresa quinto término"))
        self.input5.setPlaceholderText(_translate("MainWindow", "e"))
        self.sexto_termino.setText(_translate("MainWindow", "Ingresa sexto término"))
        self.input6.setPlaceholderText(_translate("MainWindow", "f"))
        self.grado.setText(_translate("MainWindow", "Grado"))
        self.resultado.setText(_translate("MainWindow", "Resultado"))
        self.label_11.setText(_translate("MainWindow", "¡La expresión se factorizó correctamente!"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
